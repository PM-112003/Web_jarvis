{
  "metadata": {
    "name": "Web_jarvis",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Voice AI Assistant</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Voice AI Assistant</h1>\n    <button id=\"start\">Start Voice Input</button>\n    <div id=\"inputText\"></div>\n    <div id=\"outputText\"></div>\n    <script src=\"popup.js\"></script>\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Voice AI Assistant</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n\n\n    <h1>Voice AI Assistant</h1>\n    <button id=\"start\">Start Voice Input</button>\n    <div id=\"inputText\">give some info on linear equation</div>\n    <div id=\"outputText\">A linear equation is a mathematical equation for a straight line. It can be written as y = mx + c, where m is the slope of the line and c is the y-intercept. For more information, visit: https://www.khanacademy.org/math/algebra/x2eef969c74e0d802:linear-equations-and-inequalities/x2eef969c74e0d802:linear-equations/v/graphing-linear-equations-using-slope-intercept-form</div>\n    <script src=\"popup.js\"></script>\n\n\n",
      "type": "html"
    },
    {
      "code": "document.getElementById(\"start\").addEventListener(\"click\", () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.start();\n\n    recognition.onresult = (event) => {\n        let text = event.results[0][0].transcript;\n        document.getElementById(\"inputText\").innerText = text;\n        \n        // Send text to another script using window.postMessage\n        window.postMessage({ action: \"processText\", text: text }, \"*\");\n    };\n\n    recognition.onerror = (event) => {\n        console.error(\"Speech recognition error:\", event.error);\n    };\n});\n\n// Listen for AI response using window event listener\nwindow.addEventListener(\"message\", (event) => {\n    if (event.data && event.data.action === \"displayOutput\") {\n        document.getElementById(\"outputText\").innerText = event.data.text;\n    }\n});\n",
      "status": "[19]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Open (or create) an IndexedDB database\nfunction openDatabase() {\n    return new Promise((resolve, reject) => {\n        let request = indexedDB.open(\"MyDatabase\", 1);\n\n        request.onupgradeneeded = function(event) {\n            let db = event.target.result;\n            if (!db.objectStoreNames.contains(\"settings\")) {\n                db.createObjectStore(\"settings\", { keyPath: \"key\" });\n            }\n        };\n\n        request.onsuccess = function(event) {\n            resolve(event.target.result);\n        };\n\n        request.onerror = function(event) {\n            reject(\"Database error: \" + event.target.errorCode);\n        };\n    });\n}\n\n// Store API key in IndexedDB\nfunction storeApiKey(apiKey) {\n    openDatabase().then(db => {\n        let transaction = db.transaction(\"settings\", \"readwrite\");\n        let store = transaction.objectStore(\"settings\");\n        store.put({ key: \"apiKey\", value: apiKey });\n    });\n}\n\n// Retrieve API key from IndexedDB\nfunction getApiKey() {\n    return new Promise((resolve, reject) => {\n        openDatabase().then(db => {\n            let transaction = db.transaction(\"settings\", \"readonly\");\n            let store = transaction.objectStore(\"settings\");\n            let request = store.get(\"apiKey\");\n\n            request.onsuccess = function() {\n                if (request.result) {\n                    resolve(request.result.value);\n                } else {\n                    reject(\"API Key not found!\");\n                }\n            };\n\n            request.onerror = function() {\n                reject(\"Error retrieving API key!\");\n            };\n        });\n    });\n}\n\n// Store the API key when the script loads (only once)\nstoreApiKey(scrib.getSecret(\"apiKey\"));\n\n// Listen for messages from content scripts\nwindow.addEventListener(\"message\", (event) => {\n    if (event.data && event.data.action === \"processText\") {\n        const text = event.data.text;\n\n        getApiKey()\n            .then(API_KEY => {\n                return fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`, {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify({\n                        contents: [{\n                            parts: [{\n                                text: `You are a Chrome extension AI agent. Extract the userâ€™s intent from their request and return a JSON object array with a \"command\" field. \n                                If they ask to open/fetch/search a website, return: [{ \"command\": \"open\", \"url\": \"https://example.com\" }].\n                                If they ask to search something, return: [{ \"command\": \"search\", \"query\": \"search name that user asked for\", \"url\": \"url link where you search\" }].\n                                If they ask to close the tab or exit from the current tab, return: [{ \"command\": \"close_tab\" }].\n                                If they ask to open Chrome settings, return: [{ \"command\": \"open_settings\" }].\n                                If they ask to search something inside YouTube, return: [{ \"command\": \"youtube_search\", \"query\": \"search name that user asked for\"}].\n                                If they ask for information, return: [{ \"command\": \"info\", \"ans\": \"correct answer from Gemini in text in <30 words and must give a link to the website it searched for further details\"}].\n                                If their request is unclear, return: [{ \"command\": \"unknown\", \"ans\":\"express your inability to perform that command in about 20 words only, tell the user that you can only perform searching and opening website tasks\" }].\n                                Do NOT add any extra text and return a single array of objects.\n                                User request: \"${text}\"` \n                            }]\n                        }]\n                    })\n                });\n            })\n            .then(response => response.json())\n            .then(data => {\n                let aiResponse = data?.candidates?.[0]?.content?.parts?.[0]?.text || \"[]\";\n                console.log(\"Parsed AI Response:\", aiResponse);\n\n                try {\n                    const commandsArray = JSON.parse(aiResponse);\n\t\t\t\t  \tscrib.show(commandsArray);\n\n                    if (commandsArray.length > 0) {\n                        processAICommands(commandsArray[0]); // Process only the first command\n                    } else {\n                        console.warn(\"No valid commands received from AI.\");\n                    }\n                } catch (error) {\n                    console.error(\"Error parsing AI response:\", error);\n                }\n            })\n            .catch(error => {\n                console.error(\"Error:\", error);\n                window.postMessage({ action: \"displayOutput\", text: \"Error fetching AI response.\" }, \"*\");\n            });\n    }\n});\n\n// Process a single AI command\nasync function processAICommands(commandData) {\n    await executeCommand(commandData);\n}\n\n// Execute commands\nfunction executeCommand(commandData) {\n    return new Promise((resolve) => {\n        console.log(\"Executing command:\", commandData);\n\n        if (commandData.command === \"open\" && commandData.url) {\n            window.open(commandData.url, \"_blank\");\n        } \n        else if (commandData.command === \"youtube_search\" && commandData.query) {\n            window.open(`https://www.youtube.com/results?search_query=${encodeURIComponent(commandData.query)}`, \"_blank\");\n        }    \n        else if (commandData.command === \"search\" && commandData.query) {\n            const searchUrl = `${commandData.url}${encodeURIComponent(commandData.query)}`;\n            window.open(searchUrl, \"_blank\");\n        }\n        else if (commandData.command === \"close_tab\") {\n            window.close(); // Closes the current tab\n        }\n        else if (commandData.command === \"open_settings\") {\n            window.open(\"chrome://settings/\", \"_blank\");\n        }\n        else if (commandData.command === \"info\") {\n            let text = commandData.ans;\n            console.log(\"Info response:\", text);\n            const outputDiv = document.getElementById(\"outputText\");\n            if (outputDiv) {\n                outputDiv.textContent = text;\n            }\n        }\n        else {\n            let text = commandData.ans;\n            console.log(\"Unknown command:\", text);\n            const outputDiv = document.getElementById(\"outputText\");\n            if (outputDiv) {\n                outputDiv.textContent = text;\n            }\n            scrib.show(commandData);\n        }\n        resolve();\n    });\n}\n",
      "status": "[20]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "",
      "status": "[21]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "[\n  {\n    \"command\": \"search\",\n    \"query\": \"akshy Kumar\"\n  }\n] <br>[\n  {\n    \"command\": \"search\",\n    \"query\": \"akshy Kumar\"\n  }\n] <br>[\n  {\n    \"command\": \"search\",\n    \"query\": \"akshy Kumar\",\n    \"url\": \"https://www.google.com/search?q=akshy+Kumar\"\n  }\n] <br>[\n  {\n    \"command\": \"search\",\n    \"query\": \"akshy Kumar\",\n    \"url\": \"https://www.google.com/search?q=akshy+Kumar\"\n  }\n] <br>[\n  {\n    \"command\": \"search\",\n    \"query\": \"akshay kumar\",\n    \"url\": \"https://www.google.com/search?q=akshay+kumar\"\n  }\n] <br>[\n  {\n    \"command\": \"open_youtube\"\n  }\n] <br>[\n  {\n    \"command\": \"open\",\n    \"url\": \"https://www.youtube.com\"\n  }\n] <br>[\n  {\n    \"command\": \"open\",\n    \"url\": \"https://www.youtube.com\"\n  }\n] <br>[\n  {\n    \"command\": \"open\",\n    \"url\": \"https://www.youtube.com/\"\n  }\n] <br>[\n  {\n    \"command\": \"open\",\n    \"url\": \"https://www.youtube.com\"\n  }\n] <br>[\n  {\n    \"command\": \"search\",\n    \"query\": \"what is linear equation\"\n  }\n] <br>[\n  {\n    \"command\": \"search\",\n    \"query\": \"linear equation info\"\n  }\n] <br>[\n  {\n    \"command\": \"info\",\n    \"ans\": \"A linear equation is an algebraic equation of degree one, that is, an equation whose highest exponent is one. Linear equations for a single variable are of the form y = mx + c, where m and c are constants. For more info visit https://en.wikipedia.org/wiki/Linear_equation\"\n  }\n] <br>[\n  {\n    \"command\": \"info\",\n    \"ans\": \"A linear equation is an equation of a straight line. It is of the form y = mx + b, where m is the slope of the line and b is the y-intercept. https://www.khanacademy.org/math/algebra/x2eef969c74e0d802:linear-equations-and-inequalities/v/what-is-a-linear-equation\"\n  }\n] <br>[\n  {\n    \"command\": \"info\",\n    \"ans\": \"A linear equation is an algebraic equation of the form ax + b = 0, where a and b are constants and x is the variable. Linear equations have many applications, such as finding the slope and intercept of a line or solving systems of equations. <a href=\"https://www.khanacademy.org/math/algebra/x2eef969c74e0d802:linear-equations-and-inequalities/v/intro-to-linear-equations\"> Read more about linear equations here.</a>\"\n  }\n] <br>",
      "type": "code"
    },
    {
      "code": "<style>\n\n</style>",
      "status": "",
      "output": "<style>\n\n</style>",
      "type": ""
    },
    {
      "code": "<style>\n\n</style>",
      "status": "",
      "output": "<style>\n\n</style>",
      "type": ""
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}